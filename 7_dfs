#include <stdio.h>
#include <stdlib.h>

int n, opcount, isCycle = 0, components = 0;

void dfs(int mat[100][100], int visited[100], int src, int parent,int connect[100])
{
    visited[src] = 1;
    connect[src]=1;

    for (int i = 0; i < n; i++)
    {
        opcount++;
        if (mat[src][i])
        {
            if (!visited[i])
            {
                dfs(mat, visited, i, src,connect);
            }
            else if (i != parent)
            {
                isCycle = 1;
            }
        }
    }
}

void checkGraph(int mat[100][100], int print)
{
    int visited[100] = {0};
    isCycle = 0;
    components = 0;

    for (int i = 0; i < n; i++)
    {
        if (!visited[i])
        {
            components++;
            int connect[100];
            for(int i=0;i<n;i++){
                connect[i]=0;
            }
            if (print)
                printf("\n Component %d :", components);
            dfs(mat, visited, i, -1,connect);
            if (print)
                for (int j = 0; j < n; j++)
                {
                    if (connect[j])
                    {
                        printf("%d ", j);
                    }
                }
        }
    }
}
void tester()
{
    int mat[100][100];
    printf("Enter the number of vertices\n");
    scanf("%d", &n);
    printf("Enter the adjacency matrix\n");
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            scanf("%d", &mat[i][j]);
        }
    }
    checkGraph(mat, 1);
    printf("\n\n The number of connected components : %d\n", components);
    if (components == 1)
    {
        printf("The graph is CONNECTED\n");
    }
    else
    {
        printf("The graph is DISCONNECTED\n");
    }
    if (isCycle == 1)
    {
        printf("The graph is CYCLIC\n");
    }
    else
    {
        printf("The graph is ACYCLIC\n");
    }
}



    void plotter() {
    FILE *fp = fopen("dijkstra.txt", "w");
    srand(time(0));
    int adjMat[100][100], dist[100];

    for (int k = 5; k <= 50; k += 5) {   // test graph sizes 5,10,…50
        n = k;

        // build random adjacency matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) adjMat[i][j] = 0;
                else if (rand() % 4 == 0) adjMat[i][j] = INT_MAX; // 25% no edge
                else adjMat[i][j] = rand() % 20 + 1;              // weight 1–20
            }
        }

        heapCount = 0;
        graphCount = 0;

        dikstras(n, adjMat, 0, dist);   // always source=0
        fprintf(fp, "%d\t%d\n", n, (graphCount > heapCount ? graphCount : heapCount));
    }

    fclose(fp);
    printf("Dijkstra results written to dijkstra.txt\n");
}



void main()
{
    int choice;
    printf("Enter\n1. Tester (manual input)\n2. Plotter (analysis)\nChoice: ");
    scanf("%d", &choice);

    switch (choice)
    {
    case 1:
        tester();
        break;
    case 2:
        plotter();
        break;
    default:
        printf("Invalid choice.\n");
    }

    return;
}
