#include <stdio.h>
#include <limits.h>

#define MAX 100

int n;                 
int heapCount = 0;     
int graphCount = 0;    

// - Dijkstra  -
int minDistance(int dist[], int visited[]) {
    int min = INT_MAX, minIndex = -1;
    for (int v = 0; v < n; v++) {
        heapCount++;  // counting comparisons like heap operations
        if (!visited[v] && dist[v] < min) {
            min = dist[v];
            minIndex = v;
        }
    }
    return minIndex;
}

void dijkstra(int n, int graph[MAX][MAX], int source, int dist[]) {
    int visited[MAX];
    for (int i = 0; i < n; i++) {
        dist[i] = INT_MAX;
        visited[i] = 0;
    }

    dist[source] = 0;

    for (int count = 0; count < n - 1; count++) {
        int u = minDistance(dist, visited);
        if (u == -1) break; // no more reachable nodes

        visited[u] = 1;

        for (int v = 0; v < n; v++) {
            graphCount++; // count edge relaxation attempts
            if (!visited[v] && graph[u][v] != INT_MAX && dist[u] != INT_MAX
                && dist[u] + graph[u][v] < dist[v]) {
                dist[v] = dist[u] + graph[u][v];
            }
        }
    }
}

// - Tester -
void tester() {
    int graph[MAX][MAX], dist[MAX], source;

    printf("Enter number of nodes: ");
    scanf("%d", &n);

    printf("Enter adjacency matrix (-1 for no edge):\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            scanf("%d", &graph[i][j]);
            if (graph[i][j] == -1)
                graph[i][j] = INT_MAX;
        }
    }

    printf("Enter source vertex: ");
    scanf("%d", &source);

    heapCount = 0;
    graphCount = 0;

    dijkstra(n,graph, source, dist);

    printf("\nShortest distances from %d:\n", source);
    for (int i = 0; i < n; i++) {
        if (dist[i] == INT_MAX) printf("Node %d: Unreachable\n", i);
        else printf("Node %d: %d\n", i, dist[i]);
    }

    printf("\nHeapCount = %d, GraphCount = %d\n", heapCount, graphCount);
}

// - Plotter -
void plotter() {
    FILE *fp = fopen("dijkstra.txt", "w");
    srand(time(0));
    int graph[100][100], dist[100];

    for (int k = 5; k <= 50; k += 5) {    
        n = k;

        // build random adjacency matrix
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) graph[i][j] = 0;
                else if (rand() % 4 == 0) graph[i][j] = INT_MAX; 
                else graph[i][j] = rand() % 20 + 1;              
            }
        }

        heapCount = 0;
        graphCount = 0;

        dikstras(n, graph, 0, dist);   
        fprintf(fp, "%d\t%d\n", n, (graphCount > heapCount ? graphCount : heapCount));
    }

    fclose(fp);
    printf("Dijkstra results written to dijkstra.txt\n");
}


// - Main -
int main() {
    int ch;
    printf("\nEnter\n1. Tester\n2. Plotter\nChoice: ");
    scanf("%d", &ch);

    switch (ch) {
        case 1: tester(); break;
        case 2: plotter(); break;
        default: printf("Invalid choice!\n");
    }

    return 0;
}
